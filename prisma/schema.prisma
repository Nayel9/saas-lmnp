generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Property {
  id         String   @id @default(uuid())
  user_id    String
  label      String
  address    String?
  createdAt  DateTime @default(now())
  vatEnabled Boolean  @default(false)
  // Nouveau: date de début d'activité (wizard) et IBAN facultatif
  startDate  DateTime @default(now())
  iban       String?

  incomes              Income[]
  expenses             Expense[]
  amortizations        Amortization[]
  JournalEntry         JournalEntry[]
  Asset                Asset[]
  // Ajout: relations vers les durées d'amortissement par défaut
  amortizationDefaults AmortizationDefault[]
  LedgerAccount        LedgerAccount[]       @relation("PropertyLedgerAccounts")
  CategoryToAccount    CategoryToAccount[]   @relation("PropertyCategoryToAccounts")

  @@map("Property")
}

model Income {
  id         String   @id @default(uuid())
  user_id    String
  propertyId String
  date       DateTime
  amount     Decimal  @db.Decimal(12, 2)
  label      String?
  Property   Property @relation(fields: [propertyId], references: [id])

  @@index([user_id])
  @@index([propertyId])
  @@map("Income")
}

model Expense {
  id         String   @id @default(uuid())
  user_id    String
  propertyId String
  date       DateTime
  amount     Decimal  @db.Decimal(12, 2)
  category   String
  label      String?
  Property   Property @relation(fields: [propertyId], references: [id])

  @@index([user_id])
  @@index([propertyId])
  @@map("Expense")
}

model Amortization {
  id         String   @id @default(uuid())
  user_id    String
  propertyId String
  year       Int
  amount     Decimal  @db.Decimal(12, 2)
  note       String?
  Property   Property @relation(fields: [propertyId], references: [id])

  @@index([user_id])
  @@index([propertyId])
  @@map("Amortization")
}

/// ================= Added journal & assets =================

enum JournalEntryType {
  achat
  vente
}

enum AccountKind {
  REVENUE
  EXPENSE
  ASSET
  LIABILITY
  TREASURY
  TAX
}

model JournalEntry {
  id            String           @id @default(uuid())
  user_id       String
  type          JournalEntryType
  date          DateTime
  designation   String
  tier          String?
  account_code  String
  amount        Decimal          @db.Decimal(12, 2)
  amountHT      Decimal?         @db.Decimal(12, 2)
  vatRate       Decimal?         @db.Decimal(5, 2)
  vatAmount     Decimal?         @db.Decimal(12, 2)
  amountTTC     Decimal?         @db.Decimal(12, 2)
  currency      String           @default("EUR")
  created_at    DateTime         @default(now())
  attachments   Attachment[]
  isDeposit     Boolean          @default(false)
  propertyId    String?
  property      Property?        @relation(fields: [propertyId], references: [id])
  // Nouveau: statut de paiement pour le wizard (PENDING par défaut)
  paymentStatus PaymentStatus    @default(PENDING)
  accountId     String? // nouvelle FK optionnelle
  account       LedgerAccount?   @relation(fields: [accountId], references: [id])
  accountCode   String? // denormalized snapshot
  accountLabel  String? // denormalized snapshot
  categoryKey   String? // mapping catégorie -> compte

  @@index([user_id])
  @@index([user_id, date, isDeposit])
  @@index([propertyId])
  @@map("journal_entries")
}

model Asset {
  id               String    @id @default(uuid())
  user_id          String
  label            String
  amount_ht        Decimal   @db.Decimal(12, 2)
  duration_years   Int
  acquisition_date DateTime
  account_code     String
  created_at       DateTime  @default(now())
  propertyId       String?
  property         Property? @relation(fields: [propertyId], references: [id])

  attachments Attachment[]

  @@index([user_id])
  @@index([propertyId])
  @@map("assets")
}

/// ================= Attachments =================
model Attachment {
  id         String        @id @default(cuid())
  entryId    String?
  assetId    String?
  fileName   String
  fileSize   Int
  mimeType   String
  storageKey String
  createdAt  DateTime      @default(now())
  entry      JournalEntry? @relation(fields: [entryId], references: [id], onDelete: Cascade)
  asset      Asset?        @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([entryId])
  @@index([assetId])
  @@map("attachments")
}

/// ================= NextAuth Models =================
model User {
  id                  String               @id @default(uuid())
  name                String?
  firstName           String? // nouvel attribut
  lastName            String? // nouvel attribut
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String? // hash bcrypt
  role                String               @default("user")
  plan                String? // optionnel (ex: free, pro)
  phone               String? // téléphone
  accounts            Account[]
  sessions            Session[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  termsAcceptedAt     DateTime? // timestamp acceptation CGV
  passwordResetTokens PasswordResetToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier], name: "identifier_idx")
}

/// ============== Amortization defaults ==============

enum AssetCategory {
  mobilier
  batiment
  vehicule
}

model AmortizationDefault {
  id                    String        @id @default(cuid())
  propertyId            String
  category              AssetCategory
  defaultDurationMonths Int
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  property              Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, category])
  @@map("amortization_defaults")
}

// Nouveau statut pour encaissements ventes
enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String // hash bcrypt du token
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
  @@map("password_reset_tokens")
}

model LedgerAccount {
  id         String              @id @default(cuid())
  propertyId String?
  property   Property?           @relation("PropertyLedgerAccounts", fields: [propertyId], references: [id], onDelete: Cascade)
  code       String
  label      String
  kind       AccountKind
  isEditable Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  entries    JournalEntry[]
  mappings   CategoryToAccount[]

  @@unique([propertyId, code])
  @@map("ledger_accounts")
}

model CategoryToAccount {
  id          String        @id @default(cuid())
  propertyId  String
  property    Property      @relation("PropertyCategoryToAccounts", fields: [propertyId], references: [id], onDelete: Cascade)
  categoryKey String
  accountId   String
  account     LedgerAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([propertyId, categoryKey])
  @@index([accountId])
  @@map("category_to_account")
}
